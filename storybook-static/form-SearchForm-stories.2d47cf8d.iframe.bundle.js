(self.webpackChunktoast_utility=self.webpackChunktoast_utility||[]).push([[815],{"./stories/form/SearchForm.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>SearchForm_stories,useKeyWithCustomKey:()=>useKeyWithCustomKey});var dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");const components_useKey=function useKey(){var actionRef=(0,react.useRef)(null);(0,react.useEffect)((function(){var handleKey=function handleKey(e){actionRef.current&&e.key===actionRef.current.key&&(e.target instanceof HTMLInputElement||e.target instanceof HTMLTextAreaElement||(e.preventDefault(),actionRef.current.action()))};return window.addEventListener("keydown",handleKey),function(){window.removeEventListener("keydown",handleKey),actionRef.current=null}}),[]);return{keyAction:function keyAction(key,action){actionRef.current={key,action}}}};__webpack_require__("./app/globals.css");var console=__webpack_require__("./node_modules/console-browserify/index.js"),__jsx=react.createElement,SearchForm=function SearchForm(_ref){var keyValue=_ref.keyValue,action=_ref.action,_useState=(0,react.useState)(""),searchTerm=_useState[0],setSearchTerm=_useState[1];console.log(keyValue,action);var keyAction=components_useKey().keyAction;return(0,react.useEffect)((function(){keyAction(keyValue,action)}),[keyValue,action]),__jsx("div",{className:"grid gap-4 grid-cols-2 bg-red-900 items-center"},__jsx("label",{className:"mr-2"},"Search:"),__jsx("input",{type:"text",id:"input-search",value:searchTerm,onChange:function handleInputChange(event){setSearchTerm(event.target.value)},className:"border border-green-400 text-black p-2"}))};SearchForm.displayName="SearchForm";const form_SearchForm=SearchForm;try{SearchForm.displayName="SearchForm",SearchForm.__docgenInfo={description:"",displayName:"SearchForm",props:{keyValue:{defaultValue:null,description:"",name:"keyValue",required:!0,type:{name:"string"}},action:{defaultValue:null,description:"",name:"action",required:!0,type:{name:"() => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/form/SearchForm.tsx#SearchForm"]={docgenInfo:SearchForm.__docgenInfo,name:"SearchForm",path:"stories/form/SearchForm.tsx#SearchForm"})}catch(__react_docgen_typescript_loader_error){}var addon_actions_dist=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs"),SearchForm_stories_jsx=react.createElement;const SearchForm_stories={title:"Example/ShortcutKeys",component:form_SearchForm,parameters:{layout:"centered",docs:{page:function page(){return SearchForm_stories_jsx(react.Fragment,null,SearchForm_stories_jsx(dist.Dx,null,"Shortkey Hook for Keyboard Events"),SearchForm_stories_jsx(dist.QE,null," ","we will explore the creation of a custom hook named"," ",SearchForm_stories_jsx("strong",null,"useKey")," that facilitates the handling of keyboard shortcuts in a React application. The hook takes two arguments:"," ",SearchForm_stories_jsx("strong",null,"key")," (a string representing the keyboard key) and"," ",SearchForm_stories_jsx("strong",null,"action")," (a callback function triggered when the specified key is pressed).")," ",SearchForm_stories_jsx(dist.X6,null,"Key Concepts Used"),SearchForm_stories_jsx(dist.QE,null,SearchForm_stories_jsx("ul",null,SearchForm_stories_jsx("li",null,"1. ",SearchForm_stories_jsx("strong",null,"useEffect"),": The useEffect hook is employed to handle the side effect of setting up and cleaning up event listeners for keyboard events."),SearchForm_stories_jsx("li",null,"2. ",SearchForm_stories_jsx("strong",null,"Event Listeners"),": Event listeners are used to detect keyboard events and trigger the associated actions.")),SearchForm_stories_jsx("br",null)),SearchForm_stories_jsx(dist.Dx,null,"Example: Search Component"),SearchForm_stories_jsx(dist.pm,null," ","let's consider the implementation of a search component that utilizes the ",SearchForm_stories_jsx("strong",null,"useKey")," hook. The search component accepts two arguments: key and action, which are used to define a keyboard shortcut for triggering a search action")," ",SearchForm_stories_jsx(dist.Hw,{dark:!0,format:!0,language:"jsx",code:"\nimport React, { useState, useEffect } from 'react';\nimport useKey from './useKey'; // Assuming the useKey hook is in the same directory\n\nconst SearchComponent = ({ key, action }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Utilize the useKey hook to define a keyboard shortcut\n  const { keyAction } = useKey();\n\n  // Set up the keyboard shortcut using useEffect\n  useEffect(() => {\n    keyAction(key, action);\n  }, [key, action]);\n\n  const handleInputChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  return (\n    <div>\n      <label>Search:</label>\n      <input\n        type=\"text\"\n        value={searchTerm}\n        onChange={handleInputChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchComponent;\n\n"}),SearchForm_stories_jsx(dist.dk,null),SearchForm_stories_jsx(dist.ZX,null),SearchForm_stories_jsx(dist.fQ,null))}},backgrounds:{default:"dark"}},tags:["autodocs"],argTypes:{keyValue:{defaultvalue:"y",table:{defaultValue:{summary:"y"}}},action:{control:"function",description:"A callback function triggered when the specified key is pressed",table:{defaultValue:{summary:'() => {\n            const searchInput = document.getElementById("input-search");\n            if (searchInput) {\n              searchInput.focus();\n            }\n          },'}},defaultValue:(0,addon_actions_dist.aD)("CALLBACK CALLED")}},args:{keyValue:"y"}};var useKeyWithCustomKey={args:{keyValue:"y",action:function action(){var searchInput=document.getElementById("input-search");searchInput&&searchInput.focus()}}};useKeyWithCustomKey.parameters={...useKeyWithCustomKey.parameters,docs:{...useKeyWithCustomKey.parameters?.docs,source:{originalSource:'{\n  args: {\n    keyValue: "y",\n    action: () => {\n      const searchInput = document.getElementById("input-search");\n      if (searchInput) {\n        // Check if the element exists before calling blur\n        searchInput.focus();\n      }\n    }\n  }\n}',...useKeyWithCustomKey.parameters?.docs?.source}}};const __namedExportsOrder=["useKeyWithCustomKey"]},"./node_modules/memoizerific sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/memoizerific sync recursive",module.exports=webpackEmptyContext}}]);